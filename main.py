# üìÅ main.py ‚Äî Jarvis backend (–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Å WebSocket)
# –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å openai-python ‚â• 1.1.0

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, BackgroundTasks, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse, JSONResponse
from pydantic import BaseModel
from openai import AsyncOpenAI
import os
import httpx
import asyncio
import json
import base64
import io
from typing import Optional, List, Union, Literal
import traceback

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ OpenAI async-–∫–ª–∏–µ–Ω—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
API_KEY = os.getenv("OPENAI_API_KEY")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FastAPI app ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = FastAPI()

# CORS (–º–æ–∂–Ω–æ —Å—É–∑–∏—Ç—å allow_origins –¥–æ —Å–≤–æ–µ–≥–æ –¥–æ–º–µ–Ω–∞)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class InputAudioTranscription(BaseModel):
    model: str = "gpt-4o-transcribe"
    language: Optional[str] = None
    prompt: str = ""

class TurnDetection(BaseModel):
    type: str = "server_vad"
    threshold: float = 0.5
    prefix_padding_ms: int = 300
    silence_duration_ms: int = 300
    create_response: bool = True

class NoiseReduction(BaseModel):
    type: str = "near_field"

class RealtimeSessionRequest(BaseModel):
    model: str = "gpt-4o-realtime-preview"
    modalities: List[str] = ["audio", "text"]
    instructions: str = "–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ Jarvis. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏."
    voice: str = "alloy"  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≥–æ–ª–æ—Å–∞: alloy, ash, ballad, coral, echo, sage, shimmer, verse
    input_audio_format: str = "pcm16"
    output_audio_format: str = "pcm16"
    input_audio_transcription: Optional[InputAudioTranscription] = None
    turn_detection: Optional[TurnDetection] = None
    input_audio_noise_reduction: Optional[NoiseReduction] = None
    temperature: float = 0.8
    max_response_output_tokens: Union[int, Literal["inf"]] = "inf"

class TTSRequest(BaseModel):
    text: str
    voice: str = "alloy"   # –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–ª—è TTS API: alloy, shimmer, echo, onyx, nova, fable

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ Realtime ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.post("/create_session")
async def create_session(req: RealtimeSessionRequest):
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
        async with httpx.AsyncClient() as http_client:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            request_data = {
                "model": req.model,
                "modalities": req.modalities,
                "instructions": req.instructions,
                "voice": req.voice,
                "input_audio_format": req.input_audio_format,
                "output_audio_format": req.output_audio_format,
                "temperature": req.temperature,
                "max_response_output_tokens": req.max_response_output_tokens
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
            if req.input_audio_transcription:
                request_data["input_audio_transcription"] = req.input_audio_transcription.dict(exclude_none=True)
            
            if req.turn_detection:
                request_data["turn_detection"] = req.turn_detection.dict(exclude_none=True)
                
            if req.input_audio_noise_reduction:
                request_data["input_audio_noise_reduction"] = req.input_audio_noise_reduction.dict(exclude_none=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API OpenAI
            response = await http_client.post(
                "https://api.openai.com/v1/realtime/sessions",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {API_KEY}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code != 200:
                raise HTTPException(
                    status_code=response.status_code, 
                    detail=f"OpenAI API error: {response.text}"
                )
            
            session_data = response.json()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            return {
                "sessionId": session_data["id"],
                "clientSecret": session_data["client_secret"]["value"],
                "expiresAt": session_data["client_secret"]["expires_at"],
                "voice": session_data["voice"]
            }
        
    except httpx.HTTPError as e:
        print(f"‚ùå HTTP error: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    except Exception as e:
        print(f"‚ùå Session creation error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/check_api")
async def check_api():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API
        async with httpx.AsyncClient() as http_client:
            response = await http_client.get(
                "https://api.openai.com/v1/models",
                headers={
                    "Authorization": f"Bearer {API_KEY}",
                    "Content-Type": "application/json"
                },
                timeout=10.0
            )
            
            if response.status_code == 200:
                models = response.json().get("data", [])
                realtime_models = [model for model in models if "realtime" in model.get("id", "").lower()]
                
                return {
                    "status": "API –¥–æ—Å—Ç—É–ø–µ–Ω",
                    "models_count": len(models),
                    "realtime_models": realtime_models if realtime_models else "–ù–µ –Ω–∞–π–¥–µ–Ω—ã"
                }
            else:
                return {
                    "status": "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "error": response.text
                }
    except Exception as e:
        return {
            "status": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
            "error": str(e)
        }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WebSocket –ø—Ä–æ–∫—Å–∏ –¥–ª—è Realtime API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.websocket("/ws_proxy/{token}")
async def websocket_proxy(websocket: WebSocket, token: str):
    await websocket.accept()
    client_id = f"{websocket.client.host}:{websocket.client.port}"
    print(f"üîå WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {client_id}")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    is_processing = False
    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    active_connection = True
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–±—ã—Ç–∏–µ session.created –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await websocket.send_text(json.dumps({
            "type": "session.created",
            "event_id": "proxy_init_event",
            "session": {
                "id": "proxy_session",
                "modalities": ["audio", "text"],
                "voice": "alloy",
                "model": "gpt-4o-realtime-preview",
                "instructions": "–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ Jarvis.",
                "input_audio_format": "pcm16",
                "output_audio_format": "pcm16"
            }
        }))
        
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ session.created –¥–ª—è {client_id}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        async def process_audio(audio_base64, event_id="auto"):
            nonlocal is_processing
            if is_processing or not active_connection:
                return
                
            is_processing = True
            
            try:
                if not active_connection:
                    print(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è {client_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                    return
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏
                await websocket.send_text(json.dumps({
                    "type": "input_audio_buffer.speech_started",
                    "event_id": f"proxy_speech_event_{event_id}",
                    "audio_start_ms": 0,
                    "item_id": f"msg_proxy_{event_id}"
                }))
                
                await asyncio.sleep(0.2)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                
                if not active_connection:
                    return
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
                await websocket.send_text(json.dumps({
                    "type": "input_audio_buffer.speech_stopped",
                    "event_id": f"proxy_speech_end_event_{event_id}",
                    "audio_end_ms": 1000,
                    "item_id": f"msg_proxy_{event_id}"
                }))
                
                if not active_connection:
                    return
                    
                # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!
                transcript = ""
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –Ω–µ –ø—É—Å—Ç–æ–µ
                    if not audio_base64:
                        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
                        transcript = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ"
                    else:
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, —Ä–∞–∑–º–µ—Ä: {len(audio_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        try:
                            audio_data = base64.b64decode(audio_base64)
                            print(f"‚úÖ –ê—É–¥–∏–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(audio_data)} –±–∞–π—Ç")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
                            audio_data = None
                        
                        if audio_data and len(audio_data) > 100:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ
                            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
                            audio_file = io.BytesIO(audio_data)
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è MultipartEncoder
                            file_name = f"audio_{event_id}.wav"
                            
                            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é OpenAI Whisper API
                            print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Whisper API...")
                            try:
                                transcription = await client.audio.transcriptions.create(
                                    model="whisper-1",  # –∏–ª–∏ "gpt-4o-transcribe"
                                    file=(file_name, audio_file, "audio/wav"),
                                    language="ru"  # –£–∫–∞–∑—ã–≤–∞–µ–º —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                                )
                                
                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                                transcript = transcription.text
                                print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞: {transcript}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Whisper API: {e}")
                                print(traceback.format_exc())
                        else:
                            print(f"‚ö†Ô∏è –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ: {len(audio_data) if audio_data else 0} –±–∞–π—Ç")
                            transcript = "–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
                    
                    # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    if not transcript or transcript.strip() == "":
                        transcript = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ"
                        print(f"‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
                    print(traceback.format_exc())
                    transcript = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ"
                
                if not active_connection:
                    return
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                await websocket.send_text(json.dumps({
                    "type": "conversation.item.input_audio_transcription.completed",
                    "event_id": f"proxy_transcription_event_{event_id}",
                    "item_id": f"msg_proxy_{event_id}",
                    "content_index": 0,
                    "transcript": transcript
                }))
                
                if not active_connection:
                    return
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞
                await websocket.send_text(json.dumps({
                    "type": "response.created",
                    "event_id": f"proxy_response_event_{event_id}",
                    "response": {
                        "id": f"resp_proxy_{event_id}",
                        "status": "in_progress"
                    }
                }))
                
                if not active_connection:
                    return
                    
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
                try:
                    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT —Å —Ç–µ–∫—Å—Ç–æ–º: {transcript}")
                    completion = await client.chat.completions.create(
                        model="gpt-4o",
                        messages=[
                            {"role": "system", "content": "–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ Jarvis. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏."},
                            {"role": "user", "content": transcript}
                        ],
                        temperature=0.7,
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
                    response_text = completion.choices[0].message.content
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT: {response_text[:100]}...")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
                    print(traceback.format_exc())
                    response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."
                
                if not active_connection:
                    return
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º
                for i in range(0, len(response_text), 5):
                    if not active_connection:
                        return
                        
                    chunk = response_text[i:i+5]
                    await websocket.send_text(json.dumps({
                        "type": "response.text.delta",
                        "event_id": f"proxy_text_delta_{event_id}_{i}",
                        "response_id": f"resp_proxy_{event_id}",
                        "item_id": f"msg_assistant_proxy_{event_id}",
                        "output_index": 0,
                        "content_index": 0,
                        "delta": chunk
                    }))
                    await asyncio.sleep(0.05)  # –£—Å–∫–æ—Ä—è–µ–º –≤—ã–¥–∞—á—É —Ç–µ–∫—Å—Ç–∞
                
                if not active_connection:
                    return
                    
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–≤–µ—Ç
                await websocket.send_text(json.dumps({
                    "type": "response.done",
                    "event_id": f"proxy_response_done_{event_id}",
                    "response": {
                        "id": f"resp_proxy_{event_id}",
                        "status": "completed",
                        "output": [{
                            "id": f"msg_assistant_proxy_{event_id}",
                            "type": "message",
                            "role": "assistant",
                            "content": [{
                                "type": "text",
                                "text": response_text
                            }]
                        }]
                    }
                }))
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                is_processing = False
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ –¥–ª—è {client_id}: {e}")
                traceback.print_exc()
                is_processing = False
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        audio_buffer = []  # –ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π –∞—É–¥–∏–æ
        msg_counter = 0
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–∏–Ω–≥–æ–≤
        ping_counter = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 25 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ping_task = asyncio.create_task(ping_websocket(websocket, client_id))
        
        while active_connection:
            try:
                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º-–∞—É—Ç–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                data = await asyncio.wait_for(websocket.receive_text(), timeout=15.0)
                message = json.loads(data)
                msg_counter += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏—è)
                if message["type"] != "input_audio_buffer.append":
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {client_id}: {message['type']}")
                else:
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –æ—Ç {client_id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if message["type"] == "input_audio_buffer.append":
                    # –ó–¥–µ—Å—å –º—ã –ø–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                    audio_base64 = message.get("audio", "")
                    audio_size = len(audio_base64) if audio_base64 else 0
                    print(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –æ—Ç {client_id}, —Ä–∞–∑–º–µ—Ä: {audio_size} bytes")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä
                    if audio_base64:
                        audio_buffer.append(audio_base64)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ —Å–µ–π—á–∞—Å
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if audio_size > 10000 and not is_processing:
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∞—É–¥–∏–æ –∏–∑ –±—É—Ñ–µ—Ä–∞
                        combined_audio = ''.join(audio_buffer)
                        audio_buffer = []  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                        
                        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
                        asyncio.create_task(process_audio(combined_audio, f"audio_{msg_counter}"))
                
                elif message["type"] == "input_audio_buffer.commit":
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∞—É–¥–∏–æ –∏–∑ –±—É—Ñ–µ—Ä–∞
                    combined_audio = ''.join(audio_buffer)
                    audio_buffer = []  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                    
                    if combined_audio:
                        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
                        asyncio.create_task(process_audio(combined_audio, f"commit_{msg_counter}"))
                    else:
                        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–º–º–∏—Ç –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–∞")
                
                elif message["type"] == "ping":
                    # –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∏–Ω–≥, –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–Ω–≥–æ–º
                    ping_counter += 1
                    await websocket.send_text(json.dumps({
                        "type": "pong",
                        "event_id": f"pong_{ping_counter}",
                        "ping_id": message.get("event_id", "unknown")
                    }))
                    print(f"‚ô•Ô∏è –ü–æ–ª—É—á–µ–Ω ping –æ—Ç {client_id}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω pong #{ping_counter}")
                
                elif message["type"] == "session.update":
                    # –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
                    await websocket.send_text(json.dumps({
                        "type": "session.updated",
                        "event_id": f"proxy_session_updated_{msg_counter}",
                        "session": message.get("session", {})
                    }))
                
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                
            except asyncio.TimeoutError:
                # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–∞–π–º-–∞—É—Ç–∞
                continue
            except WebSocketDisconnect:
                print(f"üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
                active_connection = False
                break
            except json.JSONDecodeError:
                print(f"‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON –æ—Ç {client_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {client_id}: {e}")
                traceback.print_exc()
                if "disconnect" in str(e).lower():
                    active_connection = False
                    break
                
        # –û—Ç–º–µ–Ω—è–µ–º –ø–∏–Ω–≥-–∑–∞–¥–∞—á—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if not ping_task.done():
            ping_task.cancel()
    
    except WebSocketDisconnect:
        print(f"üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
    except Exception as e:
        print(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
    finally:
        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–æ–µ
        active_connection = False
        print(f"üîå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {client_id}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async def ping_websocket(websocket, client_id):
    ping_counter = 0
    try:
        while True:
            await asyncio.sleep(25)  # –ü–∏–Ω–≥—É–µ–º –∫–∞–∂–¥—ã–µ 25 —Å–µ–∫—É–Ω–¥
            ping_counter += 1
            try:
                await websocket.send_text(json.dumps({
                    "type": "ping",
                    "event_id": f"server_ping_{ping_counter}"
                }))
                print(f"‚ô•Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ping #{ping_counter} –¥–ª—è {client_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping: {e}")
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ping, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É
                break
    except asyncio.CancelledError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
        print(f"üõë Ping-–∑–∞–¥–∞—á–∞ –¥–ª—è {client_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ping-–∑–∞–¥–∞—á–µ –¥–ª—è {client_id}: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TTS endpoint –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.post("/tts")
async def tts(req: TTSRequest):
    try:
        print(f"üîä TTS –∑–∞–ø—Ä–æ—Å: {req.text[:50]}... —Å –≥–æ–ª–æ—Å–æ–º {req.voice}")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å TTS
        audio_response = await client.audio.speech.create(
            model="tts-1-hd",
            voice=req.voice,
            input=req.text,
            response_format="mp3"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
        # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç await –¥–ª—è bytes –æ–±—ä–µ–∫—Ç–∞
        audio_content = audio_response.content  # –≠—Ç–æ —É–∂–µ –±–∞–π—Ç—ã
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ JSON
        audio_base64 = base64.b64encode(audio_content).decode('utf-8')
        
        print(f"‚úÖ TTS —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(audio_base64) // 1024} –ö–ë")
        return {"audio": audio_base64}
    except Exception as e:
        print(f"‚ùå TTS error: {e}")
        print(traceback.format_exc())  # –ü–µ—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –æ—à–∏–±–∫–∏
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        error_details = str(e)
        raise HTTPException(status_code=500, detail=f"TTS error: {error_details}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π TTS endpoint —Å –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∞—É–¥–∏–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.post("/tts_stream")
async def tts_stream(req: TTSRequest):
    try:
        print(f"üîä TTS Stream –∑–∞–ø—Ä–æ—Å: {req.text[:50]}... —Å –≥–æ–ª–æ—Å–æ–º {req.voice}")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å TTS
        speech_response = await client.audio.speech.create(
            model="tts-1-hd",
            voice=req.voice,
            input=req.text,
            response_format="mp3"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∞—É–¥–∏–æ
        audio_data = speech_response.content
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –∏–∑ –±–∞–π—Ç–æ–≤
        audio_stream = io.BytesIO(audio_data)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        audio_stream.seek(0)
        
        print(f"‚úÖ TTS Stream —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(audio_data)} bytes")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—É–¥–∏–æ –∫–∞–∫ –ø–æ—Ç–æ–∫
        return StreamingResponse(
            content=audio_stream, 
            media_type="audio/mpeg",
            headers={"Content-Disposition": f"attachment; filename=speech_{req.voice}.mp3"}
        )
        
    except Exception as e:
        print(f"‚ùå TTS Stream error: {e}")
        print(traceback.format_exc())
        error_details = str(e)
        raise HTTPException(status_code=500, detail=f"TTS Stream error: {error_details}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Health-check ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/")
async def root():
    return {"status": "Jarvis Voice Assistant running üöÄ", "version": "5.0 - Voice Only"}
