from fastapi import FastAPI, WebSocket
from openai import AsyncOpenAI
import os, asyncio

"""Jarvis WebSocket‚Äë—Å–µ—Ä–≤–µ—Ä ‚Äî –≤–µ—Ä—Å–∏—è, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å openai‚Äëpython ‚â•‚ÄØ1.0.0
(–≤ 1.x —Å–∏–Ω—Ç–∞–∫—Å–∏—Å .acreate –∏—Å—á–µ–∑, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç AsyncOpenAI)
"""

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

app = FastAPI()


@app.websocket("/ws")
async def ws_endpoint(ws: WebSocket):
    await ws.accept()
    cid = f"{ws.client.host}:{ws.client.port}"
    print(f"üîå WS connected {cid}", flush=True)

    try:
        while True:
            # 1Ô∏è‚É£ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            text = await ws.receive_text()
            print(f"üì• {cid} ‚Üí {text!r}", flush=True)

            # 2Ô∏è‚É£ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPT‚Äë4o –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∞
            stream = await client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": text}],
                stream=True,
            )

            async for chunk in stream:
                delta = chunk.choices[0].delta.content
                if delta:
                    await ws.send_text(delta)

            # 3Ô∏è‚É£ —Å–∏–≥–Ω–∞–ª –∫–æ–Ω—Ü–∞
            await ws.send_text("[DONE]")
            print(f"‚úÖ answer sent to {cid}", flush=True)

    except Exception as e:
        print(f"‚ùå WS error {cid}: {e}", flush=True)
        await ws.close()


@app.get("/")
async def root():
    return {"status": "Jarvis server running üöÄ"}
