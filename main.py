# üìÅ main.py ‚Äî Jarvis backend (FastAPI + OpenAI Realtime API)
# –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å openai-python ‚â• 1.1.0

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from openai import AsyncOpenAI
import os
import httpx
import asyncio
import json
import base64
from typing import Optional, List, Union, Literal

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ OpenAI async-–∫–ª–∏–µ–Ω—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
API_KEY = os.getenv("OPENAI_API_KEY")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FastAPI app ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = FastAPI()

# CORS (–º–æ–∂–Ω–æ —Å—É–∑–∏—Ç—å allow_origins –¥–æ —Å–≤–æ–µ–≥–æ –¥–æ–º–µ–Ω–∞)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–æ–¥–µ–ª–∏ –¥–ª—è Realtime API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class InputAudioTranscription(BaseModel):
    model: str = "gpt-4o-transcribe"
    language: Optional[str] = None
    prompt: str = ""

class TurnDetection(BaseModel):
    type: str = "server_vad"
    threshold: float = 0.5
    prefix_padding_ms: int = 300
    silence_duration_ms: int = 300
    create_response: bool = True

class NoiseReduction(BaseModel):
    type: str = "near_field"

class RealtimeSessionRequest(BaseModel):
    model: str = "gpt-4o-realtime-preview"
    modalities: List[str] = ["audio", "text"]
    instructions: str = "–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ Jarvis. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏."
    voice: str = "alloy"  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≥–æ–ª–æ—Å–∞: alloy, ash, ballad, coral, echo, sage, shimmer, verse
    input_audio_format: str = "pcm16"
    output_audio_format: str = "pcm16"
    input_audio_transcription: Optional[InputAudioTranscription] = None
    turn_detection: Optional[TurnDetection] = None
    input_audio_noise_reduction: Optional[NoiseReduction] = None
    temperature: float = 0.8
    max_response_output_tokens: Union[int, Literal["inf"]] = "inf"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ Realtime ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.post("/create_session")
async def create_session(req: RealtimeSessionRequest):
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
        async with httpx.AsyncClient() as http_client:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            request_data = {
                "model": req.model,
                "modalities": req.modalities,
                "instructions": req.instructions,
                "voice": req.voice,
                "input_audio_format": req.input_audio_format,
                "output_audio_format": req.output_audio_format,
                "temperature": req.temperature,
                "max_response_output_tokens": req.max_response_output_tokens
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
            if req.input_audio_transcription:
                request_data["input_audio_transcription"] = req.input_audio_transcription.dict(exclude_none=True)
            
            if req.turn_detection:
                request_data["turn_detection"] = req.turn_detection.dict(exclude_none=True)
                
            if req.input_audio_noise_reduction:
                request_data["input_audio_noise_reduction"] = req.input_audio_noise_reduction.dict(exclude_none=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API OpenAI
            response = await http_client.post(
                "https://api.openai.com/v1/realtime/sessions",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {API_KEY}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code != 200:
                raise HTTPException(
                    status_code=response.status_code, 
                    detail=f"OpenAI API error: {response.text}"
                )
            
            session_data = response.json()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            return {
                "sessionId": session_data["id"],
                "clientSecret": session_data["client_secret"]["value"],
                "expiresAt": session_data["client_secret"]["expires_at"],
                "voice": session_data["voice"]
            }
        
    except httpx.HTTPError as e:
        print(f"‚ùå HTTP error: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    except Exception as e:
        print(f"‚ùå Session creation error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/check_api")
async def check_api():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API
        async with httpx.AsyncClient() as http_client:
            response = await http_client.get(
                "https://api.openai.com/v1/models",
                headers={
                    "Authorization": f"Bearer {API_KEY}",
                    "Content-Type": "application/json"
                },
                timeout=10.0
            )
            
            if response.status_code == 200:
                models = response.json().get("data", [])
                realtime_models = [model for model in models if "realtime" in model.get("id", "").lower()]
                
                return {
                    "status": "API –¥–æ—Å—Ç—É–ø–µ–Ω",
                    "models_count": len(models),
                    "realtime_models": realtime_models if realtime_models else "–ù–µ –Ω–∞–π–¥–µ–Ω—ã"
                }
            else:
                return {
                    "status": "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "error": response.text
                }
    except Exception as e:
        return {
            "status": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
            "error": str(e)
        }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WebSocket –ø—Ä–æ–∫—Å–∏ –¥–ª—è Realtime API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.websocket("/ws_proxy/{token}")
async def websocket_proxy(websocket: WebSocket, token: str, background_tasks: BackgroundTasks):
    await websocket.accept()
    client_id = f"{websocket.client.host}:{websocket.client.port}"
    print(f"üîå WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {client_id}")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenAI Realtime API —á–µ—Ä–µ–∑ httpx (–Ω–µ —á–µ—Ä–µ–∑ WebSocket –Ω–∞–ø—Ä—è–º—É—é)
    openai_ws = None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenAI Realtime API —á–µ—Ä–µ–∑ httpx
        print(f"üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenAI –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ OpenAI –∏ –æ–±—Ä–∞—Ç–Ω–æ
        async def proxy_messages():
            try:
                # –¢–µ–ø–µ—Ä—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                async with httpx.AsyncClient(timeout=None) as http_client:
                    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–±—ã—Ç–∏–µ session.created
                    # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è WebSocket API
                    await websocket.send_text(json.dumps({
                        "type": "session.created",
                        "event_id": "proxy_init_event",
                        "session": {
                            "id": "proxy_session",
                            "modalities": ["audio", "text"],
                            "voice": "alloy",
                            "model": "gpt-4o-realtime-preview",
                            "instructions": "–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ Jarvis.",
                            "input_audio_format": "pcm16",
                            "output_audio_format": "pcm16"
                        }
                    }))
                    
                    while True:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                        data = await websocket.receive_text()
                        message = json.loads(data)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                        if message["type"] == "input_audio_buffer.append":
                            # –ó–¥–µ—Å—å –º—ã –ø–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                            # –í –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                            audio_base64 = message.get("audio", "")
                            
                            # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–µ—á–∏
                            await websocket.send_text(json.dumps({
                                "type": "input_audio_buffer.speech_started",
                                "event_id": "proxy_speech_event",
                                "audio_start_ms": 0,
                                "item_id": "msg_proxy"
                            }))
                            
                            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
                            # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º
                            await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
                            await websocket.send_text(json.dumps({
                                "type": "input_audio_buffer.speech_stopped",
                                "event_id": "proxy_speech_end_event",
                                "audio_end_ms": 1000,
                                "item_id": "msg_proxy"
                            }))
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                            await websocket.send_text(json.dumps({
                                "type": "conversation.item.input_audio_transcription.completed",
                                "event_id": "proxy_transcription_event",
                                "item_id": "msg_proxy",
                                "content_index": 0,
                                "transcript": "–ü—Ä–∏–≤–µ—Ç, –î–∂–∞—Ä–≤–∏—Å!"
                            }))
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞
                            await websocket.send_text(json.dumps({
                                "type": "response.created",
                                "event_id": "proxy_response_event",
                                "response": {
                                    "id": "resp_proxy",
                                    "status": "in_progress"
                                }
                            }))
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º
                            response_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"
                            for i in range(0, len(response_text), 5):
                                chunk = response_text[i:i+5]
                                await websocket.send_text(json.dumps({
                                    "type": "response.text.delta",
                                    "event_id": f"proxy_text_delta_{i}",
                                    "response_id": "resp_proxy",
                                    "item_id": "msg_assistant_proxy",
                                    "output_index": 0,
                                    "content_index": 0,
                                    "delta": chunk
                                }))
                                await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                            
                            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–≤–µ—Ç
                            await websocket.send_text(json.dumps({
                                "type": "response.done",
                                "event_id": "proxy_response_done",
                                "response": {
                                    "id": "resp_proxy",
                                    "status": "completed",
                                    "output": [{
                                        "id": "msg_assistant_proxy",
                                        "type": "message",
                                        "role": "assistant",
                                        "content": [{
                                            "type": "text",
                                            "text": response_text
                                        }]
                                    }]
                                }
                            }))
                        
                        elif message["type"] == "session.update":
                            # –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
                            await websocket.send_text(json.dumps({
                                "type": "session.updated",
                                "event_id": "proxy_session_updated",
                                "session": message.get("session", {})
                            }))
                        
                        # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            
            except WebSocketDisconnect:
                print(f"üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
                try:
                    await websocket.send_text(json.dumps({
                        "type": "error",
                        "event_id": "proxy_error",
                        "error": {
                            "message": str(e),
                            "type": "proxy_error"
                        }
                    }))
                except:
                    pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(proxy_messages)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        while True:
            await asyncio.sleep(1)
    
    except WebSocketDisconnect:
        print(f"üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
    except Exception as e:
        print(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ
        print(f"üîå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {client_id}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç —Å GPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class ChatRequest(BaseModel):
    message: str
    
@app.post("/chat")
async def chat(req: ChatRequest):
    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": req.message}],
            temperature=0.7,
        )
        
        return {"response": response.choices[0].message.content}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TTS endpoint –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class TTSRequest(BaseModel):
    text: str
    voice: str = "alloy"   # –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–ª—è TTS API: alloy, shimmer, echo, onyx, nova, fable

@app.post("/tts")
async def tts(req: TTSRequest):
    try:
        audio_response = await client.audio.speech.create(
            model="tts-1-hd",
            voice=req.voice,
            input=req.text
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ bytes
        audio_data = await audio_response.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ JSON
        audio_base64 = base64.b64encode(audio_data).decode('utf-8')
        
        return {"audio": audio_base64}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Health-check ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/")
async def root():
    return {"status": "Jarvis Realtime server running üöÄ"}
