// ================ –£—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ================
const SERVER_URL = window.location.origin;
const WS_PROXY_URL = `${SERVER_URL.replace('http', 'ws')}/ws_proxy`;
let ws = null;
let sessionInfo = null;
let audioContext = null;
let micStream = null;
let scriptProcessor = null;
let micEnabled = false;
let currentResponseText = "";
let reconnectAttempts = 0;
let maxReconnectAttempts = 3;
let isListening = false;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ-—ç–ª–µ–º–µ–Ω—Ç
function ensureAudioElement() {
  let audioEl = document.getElementById('ttsAudio');
  if (!audioEl) {
    log("‚ö†Ô∏è –ê—É–¥–∏–æ-—ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π");
    audioEl = document.createElement('audio');
    audioEl.id = 'ttsAudio';
    audioEl.style.display = 'none';
    document.body.appendChild(audioEl);
  }
  return audioEl;
}

const log = (msg) => {
  console.log(msg);
  const box = document.getElementById('log');
  box.textContent += `\n${msg}`;
  box.scrollTop = box.scrollHeight;
};

const showError = (message) => {
  const errorBox = document.getElementById('errorBox');
  errorBox.textContent = message;
  errorBox.style.display = 'block';
  setTimeout(() => {
    errorBox.style.display = 'none';
  }, 5000);
  console.error("Error:", message);
};

const updateStatus = (message) => {
  const statusElement = document.getElementById('status');
  statusElement.textContent = message;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
  statusElement.classList.remove('status-animation');
  void statusElement.offsetWidth; // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
  statusElement.classList.add('status-animation');
};

// ================ API –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ================
async function createSession() {
  try {
    updateStatus("–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...");
    const voiceValue = document.getElementById('voiceSelect').value;
    
    const response = await fetch(`${SERVER_URL}/create_session`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        voice: voiceValue,
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${errorText}`);
    }
    
    sessionInfo = await response.json();
    log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${sessionInfo.sessionId}`);
    log(`üîä –ì–æ–ª–æ—Å: ${sessionInfo.voice}`);
    
    return sessionInfo;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    showError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é: ${error.message}`);
    throw error;
  }
}

// ================ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏) ================
function connectToProxy(sessionData) {
  try {
    updateStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
    const wsUrl = `${WS_PROXY_URL}/${encodeURIComponent(sessionData.clientSecret)}`;
    log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –ø—Ä–æ–∫—Å–∏: ${wsUrl}`);
    
    const socket = new WebSocket(wsUrl);
    
    socket.onopen = async () => {
      log("üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");
      updateStatus("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
      reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
      await startMicrophone();
    };
    
    socket.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:`, data);
        
        switch (data.type) {
          case "session.created":
            log("üìù –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
            break;
            
          case "session.updated":
            log("üìù –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
            break;
            
          case "error":
            log(`‚ùå –û—à–∏–±–∫–∞: ${data.error?.message || JSON.stringify(data.error)}`);
            showError(data.error?.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
            break;
            
          case "input_audio_buffer.speech_started":
            log("üó£Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å");
            setMicrophoneListening(true);
            break;
            
          case "input_audio_buffer.speech_stopped":
            log("üé§ –ö–æ–Ω–µ—Ü —Ä–µ—á–∏");
            setMicrophoneListening(false);
            break;
            
          case "conversation.item.input_audio_transcription.completed":
            log(`üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${data.transcript}`);
            updateStatus(`–í—ã: ${data.transcript}`);
            currentResponseText = "";
            break;
            
          case "response.created":
            log("ü§ñ –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞");
            break;
            
          case "response.text.delta":
            currentResponseText += data.delta;
            if (data.delta.trim() !== "") {
              log(`üì§ ${data.delta}`);
            }
            updateStatus(`Jarvis: ${currentResponseText}`);
            break;
            
          case "response.done":
            log("‚úÖ –û—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
            // –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ TTS API
            if (currentResponseText.length > 0) {
              playTextAsTTS(currentResponseText);
            }
            break;
            
          default:
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            break;
        }
      } catch (e) {
        log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}`);
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket:", e);
      }
    };
    
    socket.onerror = (error) => {
      log(`‚ùå WebSocket –æ—à–∏–±–∫–∞`);
      console.error("WebSocket error:", error);
      showError("–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
    };
    
    socket.onclose = (event) => {
      log(`üîå WebSocket –∑–∞–∫—Ä—ã—Ç, –∫–æ–¥: ${event.code}, –ø—Ä–∏—á–∏–Ω–∞: ${event.reason || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
      updateStatus("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
      stopMicrophone();
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ
      if (event.code !== 1000 && event.code !== 1001 && reconnectAttempts < maxReconnectAttempts) {
        reconnectAttempts++;
        const timeout = reconnectAttempts * 2000;
        log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${maxReconnectAttempts} —á–µ—Ä–µ–∑ ${timeout/1000} —Å–µ–∫.`);
        setTimeout(() => {
          ws = connectToProxy(sessionInfo);
        }, timeout);
      }
    };
    
    return socket;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
    showError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
    throw error;
  }
}

// ================ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º ================
async function startMicrophone() {
  try {
    if (micEnabled) return;
    
    log("üé§ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–æ–º
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      throw new Error("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioContext –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    audioContext = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 24000 });
    
    log("üé§ –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");
    updateStatus("–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");
    
    const stream = await navigator.mediaDevices.getUserMedia({ 
      audio: {
        echoCancellation: true,
        noiseSuppression: true,
        autoGainControl: true
      } 
    });
    
    log("‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω");
    micStream = stream;
    
    // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ –ø–æ—Ç–æ–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    const micSource = audioContext.createMediaStreamSource(stream);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
    scriptProcessor = audioContext.createScriptProcessor(4096, 1, 1);
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞
    let silenceTimer = null;
    let isSpeaking = false;
    let audioCounter = 0;
    let noSoundCounter = 0;
    let lastAudioSent = Date.now();
    
    scriptProcessor.onaudioprocess = (audioProcessingEvent) => {
      if (ws && ws.readyState === WebSocket.OPEN) {
        try {
          const inputBuffer = audioProcessingEvent.inputBuffer;
          const inputData = inputBuffer.getChannelData(0);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞
          let soundLevel = 0;
          for (let i = 0; i < inputData.length; i++) {
            soundLevel += Math.abs(inputData[i]);
          }
          soundLevel = soundLevel / inputData.length;
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—á–∏
          const threshold = 0.01;
          const currentTime = Date.now();
          
          if (soundLevel > threshold) {
            noSoundCounter = 0;
            audioCounter++;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—É–∫–∞
            if (audioCounter > 3 && (!isSpeaking || audioCounter < 10 || (currentTime - lastAudioSent > 500))) {
              lastAudioSent = currentTime;
              
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º float32 –≤ int16
              const pcmBuffer = new Int16Array(inputData.length);
              for (let i = 0; i < inputData.length; i++) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ float [-1.0,1.0] –≤ int16 [-32768,32767]
                pcmBuffer[i] = Math.max(-32768, Math.min(32767, Math.floor(inputData[i] * 32768)));
              }
              
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ base64 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
              const binary = new Uint8Array(pcmBuffer.buffer);
              const base64 = btoa(String.fromCharCode(...new Uint8Array(binary.buffer)));
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π
              ws.send(JSON.stringify({
                type: "input_audio_buffer.append",
                audio: base64
              }));
              
              if (!isSpeaking) {
                isSpeaking = true;
                setMicrophoneListening(true);
                log("üéôÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–≤—É–∫, –∞—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...");
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (silenceTimer) {
                  clearTimeout(silenceTimer);
                  silenceTimer = null;
                }
              }
              
              // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
              const micPulse = document.getElementById('micPulse');
              const intensity = Math.min(50, soundLevel * 1000);
              micPulse.style.boxShadow = `0 0 ${25 + intensity}px #00FF7F`;
            }
          } else {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–∏—à–∏–Ω—ã
            noSoundCounter++;
            
            // –ï—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–∞—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
            if (isSpeaking && noSoundCounter > 30) { // ~30 —Ñ—Ä–µ–π–º–æ–≤ = ~600–º—Å —Ç–∏—à–∏–Ω—ã
              if (!silenceTimer) {
                silenceTimer = setTimeout(() => {
                  isSpeaking = false;
                  audioCounter = 0;
                  setMicrophoneListening(false);
                  log("üéôÔ∏è –¢–∏—à–∏–Ω–∞, –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
                  silenceTimer = null;
                  document.getElementById('micPulse').style.boxShadow = "0 0 25px #00FF7F";
                }, 1000); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
              }
            }
          }
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:", e);
        }
      }
    };
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏ –∫ –≤—ã—Ö–æ–¥—É
    micSource.connect(scriptProcessor);
    scriptProcessor.connect(audioContext.destination);
    
    micEnabled = true;
    updateStatus("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω, –≥–æ–≤–æ—Ä–∏—Ç–µ...");
    log("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏");
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ${error.message}`);
    showError(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ${error.message}`);
    updateStatus("–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
  }
}

function stopMicrophone() {
  if (!micEnabled) return;
  
  if (scriptProcessor) {
    try {
      scriptProcessor.disconnect();
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:", e);
    }
    scriptProcessor = null;
  }
  
  if (micStream) {
    try {
      micStream.getTracks().forEach(track => track.stop());
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–µ–∫–æ–≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:", e);
    }
    micStream = null;
  }
  
  if (audioContext) {
    try {
      audioContext.close();
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ audioContext:", e);
    }
    audioContext = null;
  }
  
  micEnabled = false;
  setMicrophoneListening(false);
  updateStatus("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω");
  log("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–≤–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è)
function setMicrophoneListening(listening) {
  isListening = listening;
  const micPulseElement = document.getElementById('micPulse');
  
  if (listening) {
    micPulseElement.classList.add('pulsing');
    micPulseElement.classList.add('listening');
  } else {
    micPulseElement.classList.remove('pulsing');
    micPulseElement.classList.remove('listening');
  }
}

// ================ TTS —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ================
async function playTextAsTTS(text) {
  try {
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –Ω–µ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
    if (!text || text.trim() === "") {
      log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è TTS, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS
    const useBrowserTTS = document.getElementById('browserTtsToggle')?.checked || false;
    
    if (useBrowserTTS) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
      log("üîä –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏...");
      updateStatus("–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º...");
      
      if (!('speechSynthesis' in window)) {
        throw new Error("–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
      }
      
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è
      window.speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.9;
      utterance.pitch = 1.0;
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      utterance.onstart = () => {
        log("üîä –ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS");
        updateStatus("Jarvis –≥–æ–≤–æ—Ä–∏—Ç...");
      };
      
      utterance.onend = () => {
        log("üîä –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS –∑–∞–≤–µ—Ä—à–µ–Ω");
        updateStatus("–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É");
      };
      
      utterance.onerror = (e) => {
        log(`‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS: ${e.error}`);
        updateStatus("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è");
      };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ç–µ–∑
      window.speechSynthesis.speak(utterance);
      return;
    }
    
    log("üîä –ó–∞–ø—Ä–æ—Å TTS...");
    updateStatus("–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏...");
    
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞
    const ttsUrl = `${SERVER_URL}/tts_stream`;
    
    // –î–µ–ª–∞–µ–º POST –∑–∞–ø—Ä–æ—Å
    const response = await fetch(ttsUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: text,
        voice: document.getElementById('voiceSelect').value
      })
    });
    
    if (!response.ok) {
      throw new Error(`TTS –æ—à–∏–±–∫–∞: ${response.status}`);
    }

    // –°–æ–∑–¥–∞–µ–º blob –∏–∑ –ø–æ—Ç–æ–∫–∞
    const blob = await response.blob();
    const audioUrl = URL.createObjectURL(blob);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
    let audioElement = ensureAudioElement();
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    try {
      audioElement.pause();
      audioElement.currentTime = 0;
    } catch (e) {
      log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞—É–¥–∏–æ: ${e.message}`);
    }
    
    audioElement.src = audioUrl;
    audioElement.onended = () => {
      updateStatus("–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É");
      log("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
      URL.revokeObjectURL(audioUrl);
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    audioElement.onerror = (e) => {
      log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: ${e}`);
      updateStatus("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è");
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–±—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS
      useBrowserTTSFallback(text);
    };
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    audioElement.onloadeddata = () => {
      log(`üîä –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${audioElement.duration.toFixed(1)}—Å`);
      audioElement.play()
        .then(() => {
          log("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ");
          updateStatus("Jarvis –≥–æ–≤–æ—Ä–∏—Ç...");
        })
        .catch(e => {
          log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${e}`);
          
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–±—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS
          useBrowserTTSFallback(text);
        });
    };
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ TTS: ${error.message}`);
    showError(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: ${error.message}`);
    updateStatus("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏");
    
    // –ü—Ä–æ–±—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    useBrowserTTSFallback(text);
    
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ TTS, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–Ω–æ–≤–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞—É–∑—ã
    setTimeout(() => {
      updateStatus("–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É");
    }, 2000);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
function useBrowserTTSFallback(text) {
  try {
    log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏...");
    
    if (!('speechSynthesis' in window)) {
      log("‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
      return;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è
    window.speechSynthesis.cancel();
    
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    utterance.rate = 0.9;
    utterance.pitch = 1.0;
    
    utterance.onstart = () => {
      log("üîä –ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS");
    };
    
    utterance.onend = () => {
      log("üîä –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω");
      updateStatus("–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É");
    };
    
    utterance.onerror = (e) => {
      log(`‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS: ${e.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ç–µ–∑
    window.speechSynthesis.speak(utterance);
  } catch (e) {
    log(`‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: ${e.message}`);
  }
}

// ================ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ================
document.addEventListener('DOMContentLoaded', function() {
  // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ-—ç–ª–µ–º–µ–Ω—Ç
  ensureAudioElement();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Start/Stop
  document.getElementById('startBtn').addEventListener('click', async () => {
    try {
      const startBtn = document.getElementById('startBtn');
      
      if (micEnabled) {
        // –ï—Å–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë
        stopMicrophone();
        if (ws && ws.readyState !== WebSocket.CLOSED) {
          ws.close();
        }
        startBtn.textContent = "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å";
        updateStatus("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
      } else {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –∏ WebSocket
        startBtn.textContent = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å";
        startBtn.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        try {
          const session = await createSession();
          ws = connectToProxy(session);
          reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        } catch (error) {
          startBtn.textContent = "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å";
          showError(error.message);
        } finally {
          startBtn.disabled = false;
        }
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      showError(error.message);
      document.getElementById('startBtn').disabled = false;
      document.getElementById('startBtn').textContent = "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å";
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ –ø—É–ª—å—Å–∞
  document.getElementById('micPulse').addEventListener('click', function() {
    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (ws && ws.readyState === WebSocket.OPEN && !isListening) {
      if (!micEnabled) {
        startMicrophone();
      } else {
        log("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω");
        updateStatus("–ì–æ–≤–æ—Ä–∏—Ç–µ...");
      }
    } else if (!ws || ws.readyState !== WebSocket.OPEN) {
      showError("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Å—Å–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å'");
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
  document.getElementById('browserTtsToggle').addEventListener('change', function() {
    const useBrowserTts = this.checked;
    if (useBrowserTts) {
      log("üîä –í–∫–ª—é—á–µ–Ω –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏");
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
      if (!('speechSynthesis' in window)) {
        log("‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
        showError("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏");
        this.checked = false;
      }
    } else {
      log("üîä –í–∫–ª—é—á–µ–Ω —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ OpenAI API");
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  fetch(`${SERVER_URL}/health`)
    .then(response => response.text())
    .then(data => {
      try {
        const jsonData = JSON.parse(data);
        log(`‚úÖ API –≥–æ—Ç–æ–≤: ${jsonData.status}`);
        log(`üìÜ –í–µ—Ä—Å–∏—è: ${jsonData.version}`);
        updateStatus("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
      } catch (e) {
        log(`‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON-–æ—Ç–≤–µ—Ç, –Ω–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      }
    })
    .catch(error => {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: ${error.message}`);
      showError("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
    });
});

log("‚úÖ Jarvis v5.5 –∑–∞–≥—Ä—É–∂–µ–Ω!");
